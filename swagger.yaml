---
swagger: '2.0'
info:
  description: '"Spring Boot REST API for Online Store"'
  version: 1.0.0
  title: Spring Boot REST API
  contact:
    name: John Thompson
    url: https://springframework.guru/about/
    email: john@springfrmework.guru
  license:
    name: Apache License Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0"
host: localhost:8080
basePath: "/"
tags:
- name: score-controller
  description: Score Controller
paths:
  "/api/score":
    get:
      tags:
      - score-controller
      summary: findAllScores
      operationId: findAllScoresUsingGET
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/Score"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - score-controller
      summary: save
      operationId: saveUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int64
      - name: id_user
        in: query
        required: false
        type: integer
        format: int32
      - name: id_store
        in: query
        required: false
        type: integer
        format: int32
      - name: id_order
        in: query
        required: false
        type: integer
        format: int32
      - name: opinion
        in: query
        required: false
        type: string
      - name: stars
        in: query
        required: false
        type: integer
        format: int32
      - name: createAt
        in: query
        required: false
        type: string
        format: date-time
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/api/score/order/{id}":
    get:
      tags:
      - score-controller
      summary: findScoreByPurchase
      operationId: findScoreByPurchaseUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int32
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/Score"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/api/score/store/{id}":
    get:
      tags:
      - score-controller
      summary: findByStore
      operationId: findByStoreUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int32
      - name: start
        in: query
        description: start
        required: true
        type: string
        format: date-time
      - name: end
        in: query
        description: end
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/Score"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/api/score/user/{id}":
    get:
      tags:
      - score-controller
      summary: findByUser
      operationId: findByUserUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int32
      - name: start
        in: query
        description: start
        required: true
        type: string
        format: date-time
      - name: end
        in: query
        description: end
        required: true
        type: string
        format: date-time
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              "$ref": "#/definitions/Score"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  "/api/score/{id}":
    get:
      tags:
      - score-controller
      summary: findScore
      operationId: findScoreUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/definitions/Score"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
      - score-controller
      summary: edit
      operationId: editUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int64
      - name: opinion
        in: query
        description: opinion
        required: false
        type: string
      - name: stars
        in: query
        description: stars
        required: false
        type: integer
        format: int32
      responses:
        '200':
          description: OK
          schema:
            type: string
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
      - score-controller
      summary: delete
      operationId: deleteUsingDELETE
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: integer
        format: int64
      responses:
        '200':
          description: OK
          schema:
            type: string
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
definitions:
  Score:
    type: object
    properties:
      createAt:
        type: string
        format: date-time
      id:
        type: integer
        format: int64
      id_order:
        type: integer
        format: int32
      id_store:
        type: integer
        format: int32
      id_user:
        type: integer
        format: int32
      opinion:
        type: string
      stars:
        type: integer
        format: int32
    title: Score
